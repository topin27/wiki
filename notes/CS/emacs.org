* tramp

** 管道

考虑这样一个场景：使用tramp访问远端的文件，且该文件需要root权限，当然tramp时直接使用root是一种方式，另一种方式是使用管道解决：

#+BEGIN_EXAMPLE
    /ssh:user@<ip>|sudo:/etc/network/interfaces
#+END_EXAMPLE

* org

** 代码块

*** 代码块的执行路径

org中的代码块可以增加一个dir参数用于指定命令执行的路径，而且该dir参数也支持tramp：

#+BEGIN_EXAMPLE
    grep home passwd
#+END_EXAMPLE

** 结构化编辑

*** 描述性列表

Elijah Wood :: He plays Frodo;

*** 脚注

=C-c C-x f= 可以在当前位置插入一个脚注， =C-c C-c= 在脚注和标记的内容之间切换。

*** 常用的结构化快捷方式

| commannd                                     | shortcuts            |
|----------------------------------------------+----------------------|
| next/previous heading                        | C-c C-n/p            |
| next/previous heading                        | C-c C-n/p            |
| next/previous heading, same level            | C-c C-f/b            |
| backward to higher level heading             | C-c C-u              |
| jump to another place in document            | C-c C-j              |
| previous/next plain list item                | S-UP/DOWN            |
| insert new heading/item at current level     | M-RET                |
| insert new heading after subtree             | C-RET                |
| insert new TODO entry/checkbox item          | M-S-RET              |
| insert TODO entry/ckbx after subtree         | C-S-RET              |
| turn (head)line into item, cycle item type   | C-c -                |
| turn item/line into headline                 | C-c *                |
| promote/demote heading                       | M-LEFT/RIGHT         |
| promote/demote current subtree               | M-S-LEFT/RIGHT       |
| move subtree/list item up/down               | M-S-UP/DOWN          |
| sort subtree/region/plain-list               | C-c \^               |
| clone a subtree                              | C-c C-x c            |
| refile subtree                               | C-c C-w              |
| kill/copy subtree                            | C-c C-x C-w/M-w      |
| yank subtree                                 | C-c C-x C-y or C-y   |
| narrow buffer to subtree / widen             | C-x n s/w            |

*** 参考

- [[http://caole.net/diary/org_mode.html][Emacs org mode 学习笔记]]

* 编码转换

编码转换：

#+BEGIN_EXAMPLE
    C-x C-m f utf-8-unix RET   ;;即可把当前文件转换为 utf-8 编码（前提是要首先转换成可以识别的编码）。
    C-x C-m c RET C-x C-w RET ;;另存为指定编码的(会提示当前文件编码)
    C-x C-m r    ;;以特定的编码重新打开当前文件
#+END_EXAMPLE

** 参考

- [[http://www.cnblogs.com/ruizhe/archive/2010/12/02/1894506.html][emacs 转换文件编码]]

* elisp中变量的定义

** =exec-path= , =$PATH= 和 =load-path= 的区别

=exec-path= 是emacs查找可执行文件的路径， =exec-path= 只在emacs启动时从 =$PATH= 中读取值进行初始化。

=$PATH= 自然就是用于执行shell中的命令或者 =M-!= 执行的命令。

=load-path= 则是emacs导入elisp的路径。

*** 参考

- [[https://emacs.stackexchange.com/questions/550/exec-path-and-path][exec-path and $PATH]]

* 录制宏

=C-x (= 开始录制， =C-x )= 结束录制， =C-x e= 单次执行宏， =C-u 10 C-x e= 执行宏10次。

* ibuffer

** 分组

| key   | bindings                            |
|-------+-------------------------------------|
| / m   | 基于major mode设定一个筛选条件      |
| / n   | 基于buffer name设定一个筛选条件     |
| / c   | 基于buffer 的内容设定一个筛选条件   |
| / f   | 基于filename 设定一个筛选条件       |
| / >   | 基于buffer size 设定一个筛选条件    |
| / <   | 也是基于buffer size                 |
| / /   | 删掉所有生效的筛选条件              |

| key   | bindings               |
|-------+------------------------|
| / g   | 根据筛选结果创建分组   |
| TAB   | 移动到下一个分组       |
| M-p   | 移动到上一个分组       |
| / \   | 删除所有存在的分组     |
